rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    ///////////////////
    /// COLLECTIONS ///
    ///////////////////

    // Note: Add a verification of each document ID => {id: ID_SHOULD_BE_EQUAL_TO_PATH}
    // Add schemas validators for document update/create => ISSUE#650

    /// USERS RULES ///
    // TODO: Create a "public users" collection to get non sensitive user data => ISSUE#1359

    match /users/{userId} {
    	allow read: if userId() == existingData().uid
      	|| (isSignedIn() && isOrgMember(userId, userOrgId()));
    	// We can read user data from the same organization as us until we got public users collection.
    	allow update: if isSignedIn()
      	&& userId() == incomingData().uid
        && incomingData().uid == existingData().uid
        && incomingData().email == existingData().email;
    	allow create: if userId() == incomingData().uid;
      allow delete: if userId() == existingData().uid;
    }

    /// NOTIFICATIONS RULES ///

    match /notifications/{notificationId} {
    	allow read, update: if userId() == existingData().userId
      	|| currentUser().orgId == existingData().organization.id;
    	allow create, delete: if false;
    }

    /// INVITATIONS RULES ///

    match /invitations/{invitationId} {
    	allow read: if userId() == existingData().user.uid
      	|| userOrgId() == existingData().organization.id;
    	allow update, create: if userId() == incomingData().user.uid
      	|| userOrgId() == incomingData().organization.id
        || isOwner(userOrgId(), incomingData().docId)
        || orgCan('isAdmin', userOrgId(), incomingData().docId);
      allow delete: if isOrgAdmin(userId(), orgId) || userId() == existingData().user.uid;
    }

    /// ORGANIZATION RULES ///

    match /orgs/{orgId} {
    	allow create: if isSignedIn()
      	&& incomingData().status == 'pending'
        && documentIdChecked(orgId, 'orgs');
      allow update: if isSignedIn()
      	&& incomingData().status == existingData().status
        && incomingData().id == existingData().id
        && documentIdChecked(orgId, 'orgs');
      allow delete: if isSuperAdmin(userId(), orgId);
      allow read: if isSignedIn();

      match /{documents=**} {
        allow read, write;
      }
    }

    /// PERMISSIONS RULES ///

    match /permissions/{orgId} {
    	allow read: if isOrgMember(orgId);
      allow create: if isOrgAdmin(userId(), orgId)
      	&& incomingData().id == orgId
        && documentIdChecked(orgId, 'permissions');
			allow update: if isOrgAdmin(userId(), orgId)
      	&& incomingData().id == orgId
        && documentIdChecked(orgId, 'permissions')
        && incomingData().id == existingData().id;

      match /{documents=**} {
        allow read, write;
      }
    }

    /// MOVIES RULES ///

    match /movies/{movieId} {
    	// We allow all movie read as Archipel Content is a catalog of public movies.
      allow read: if userHasValidOrg();
      allow create: if userHasValidOrg()
      	&& documentIdChecked(movieId, 'movies')
        && canCreateNewPermissions(userOrgId(), movieId);
      allow update: if isOrgAdmin(userId(), userOrgId())
        && documentIdChecked(movieId, 'movies')
        && incomingData().id == existingData().id
        && orgCan('canUpdate', userOrgId(), movieId);
      allow delete: if orgCan('canDelete', userOrgId(), movieId)
      	&& isOrgAdmin(userId(), userOrgId());

        match /materials/{materialId} {
          allow read: if userHasValidOrg();
          allow create: if userHasValidOrg()
            && documentIdChecked(movieId, 'movies');
          allow update: if userHasValidOrg()
          	&& documentIdChecked(movieId, 'movies')
            && incomingData().id == existingData().id;
          allow delete: if userHasValidOrg();
        }
    }

    /// DELIVERIES RULES ///

    match /deliveries/{deliveryId} {
    	allow read: if isStakeholder(userOrgId());
      allow create: if userHasValidOrg()
      	&& documentIdChecked(deliveryId, 'deliveries')
        && canCreateNewPermissions(userOrgId(), deliveryId);
      allow update: if orgCan('canUpdate', userOrgId(), deliveryId);
      allow delete: if orgCan('canDelete', userOrgId(), deliveryId);

      match /materials/{materialId} {
        allow read: if userHasValidOrg();
      	allow create: if userHasValidOrg()
      		&& documentIdChecked(deliveryId, 'deliveries')
        	&& orgCan('canCreate', userOrgId(), deliveryId);
      	allow update: if orgCan('canUpdate', userOrgId(), deliveryId)
        	&& incomingData().id == existingData().id;
        allow delete: if orgCan('canUpdate', userOrgId(), deliveryId);
      }

      match /stakeholders/{stakeholderId} {
        allow read: if userHasValidOrg();
        allow write: if orgCan('isAdmin', userOrgId(), deliveryId)
        	|| isOwner(userOrgId(), deliveryId);
      }
    }

    /// DISTRIBUTION DEALS RULES ///

    match /{path=**}/distributiondeals/{dealId} {
    	allow write: if true; // @TODO #1388 Only if contract.status  === 'unknown' ?
      allow read: if true; // @TODO #1388 Only if licensee.orgId == currentUser.orgId || if licensor.orgId == currentUser.orgId
    }

    /////////////////
    /// FUNCTIONS ///
    /////////////////

    // Check the requested data.
    function existingData() {
      return resource.data;
    }

    // Check the data after being updated.
    function incomingData() {
      return request.resource.data;
    }

    function currentUser() {
      return request.auth;
    }

    function userId() {
      return currentUser().uid;
    }

  	// Check if the user is logged in the app.
    function isSignedIn() {
      return currentUser() != null;
    }

  	function userOrgId() {
    	return get(/databases/$(database)/documents/users/$(userId())).data.orgId;
  	}

    // Check if the user belongs to an organization.
    function userHasValidOrg() {
    	return get(/databases/$(database)/documents/orgs/$(userOrgId())).data.status == "accepted";
    }

    // Check if the param ID is equal to the data ID.
    function documentIdChecked(docId, collection) {
    	return docId == getAfter(/databases/$(database)/documents/$(collection)/$(docId)).data.id;
    }

  	function isSuperAdmin(userId, orgId) {
    	return getOrgPermissions(orgId).roles[userId] == "superAdmin";
  	}

    function isOrgAdmin(userId, orgId) {
    	// /!\ Carefull, parentheses needed for operator precedence to work
    	return (getOrgPermissions(orgId).roles[userId] == "admin")
        || (isSuperAdmin(userId, orgId));
    }

    function isOrgMember(userId, orgId) {
    	return (getOrgPermissions(orgId).roles[userId] == "member")
      	|| (isOrgAdmin(userId, orgId));
    }

    function isOwner(orgId, docId) {
    	return getDocumentPermissions(orgId, docId).ownerId == orgId;
    }

    // Check is the organization is stakeholder on a delivery.
    function isStakeholder(orgId) {
    	return orgId in resource.data.stakeholderIds;
    }

    function getDocumentPermissions(orgId, docId) {
    	return get(/databases/$(database)/documents/permissions/$(orgId)/documentPermissions/$(docId)).data;
    }

    function canCreateNewPermissions(orgId, docId) {
    	return getAfter(/databases/$(database)/documents/permissions/$(orgId)/documentPermissions/$(docId)).data.canCreate == true;
    }

    function getOrgPermissions(orgId) {
    	return get(/databases/$(database)/documents/permissions/$(orgId)).data;
    }

    function documentPermissionsExist(orgId, docId) {
    	return exists(/databases/$(database)/documents/permissions/$(orgId)/documentPermissions/$(docId));
    }

		// Parameter "action" can either be "canCreate", "canRead", "canUpdate" or "canDelete"
    function orgCan(action, orgId, docId) {
      return (getDocumentPermissions(orgId, docId).ownerId == orgId)
        || (getDocumentPermissions(orgId, docId).admin == true)
        || (getDocumentPermissions(orgId, docId)[action] == true);
    }
  }
}
